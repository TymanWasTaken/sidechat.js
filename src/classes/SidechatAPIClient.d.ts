export default SidechatAPIClient;
/**
 * API client class for making requests to Sidechat's private API.  You'll need to [authenticate]{@tutorial Authentication} before using most of the methods.
 * @class
 * @since 2.0.0-alpha.0
 */
declare class SidechatAPIClient {
    /**
     * Create a new instance of the API client
     * @param {SidechatAuthToken} [token] - user bearer token
     */
    constructor(token?: SidechatAuthToken);
    /**
     * User bearer token
     * @type {SidechatAuthToken}
     * */
    userToken: SidechatAuthToken;
    /**
     * Default headers for every API request
     * @type {Object}
     * @static
     */
    defaultHeaders: any;
    /**
     * Manually set the currently signed in user's token.  Generally try to avoid this and instead either pass a token to the constructor or login automatically through the auth functions
     * @method
     * @param {SidechatAuthToken} token - user bearer token
     */
    setToken: (token: SidechatAuthToken) => void;
    /**
     * Initiate the login process with a phone number.  Should be followed up with verifySMSCode().
     * @method
     * @param {Number} phoneNumber - US phone number (WITHOUT +1) to send verification code to
     */
    loginViaSMS: (phoneNumber: number) => Promise<any>;
    /**
     * Verify the code sent via SMS with loginViaSMS().
     * @method
     * @param {Number} phoneNumber - US phone number (WITHOUT +1) that verification code was sent to
     * @param {String} code  - the verification code
     */
    verifySMSCode: (phoneNumber: number, code: string) => Promise<any>;
    /**
     * Set the user's age
     * @method
     * @param {Number} age - user's age in years
     * @param {String} registrationID  - the registration ID generated by verifySMSCode()
     */
    setAge: (age: number, registrationID: string) => Promise<any>;
    /**
     * Initiate the email setup process.  Should be followed up with checkEmailVerification().
     * @method
     * @param {String} email - school email address to send verification code to
     * @tutorial Email Registration
     */
    registerEmail: (email: string) => Promise<any>;
    /**
     * Check is the user's email is verified.
     * @method
     */
    checkEmailVerification: () => Promise<any>;
    /**
     * Set the device ID of the current user
     * @method
     * @param {String} deviceId - the device ID to set
     */
    setDeviceID: (deviceID: any) => Promise<any>;
    /**
     * Get updated status for user and group
     * @method
     * @param {String} [groupID] - ID of a specific group to retrieve info from
     */
    getUserAndGroup: (groupID?: string) => Promise<any>;
    /**
     * Fetches posts from the specified category in a group
     * @method
     * @param {String} groupID - group ID
     * @param {"hot"|"recent"|"top"} category - category to filter posts
     * @param {SidechatCursorString} [cursor] - cursor string
     * @returns {SidechatPostsAndCursor} List of posts and cursor
     */
    getGroupPosts: (groupID: string, category?: "hot" | "recent" | "top", cursor?: SidechatCursorString) => SidechatPostsAndCursor;
    /**
     * Upvote or downvote, or unvote a post
     * @method
     * @param {String} postID - post ID to vote on
     * @param {SidechatVoteString} action - whether to upvote, downvote, or reset vote
     */
    setVote: (postID: string, action: SidechatVoteString) => Promise<any>;
    /**
     * Get all the commments on a post
     * @method
     * @param {String} postID - post ID to get comments for
     * @returns {SidechatPostOrComment[]} list of comments
     */
    getPostComments: (postID: string) => SidechatPostOrComment[];
    /**
     * Gets groups to be displayed on the "Explore Groups" page
     * @method
     * @returns {SidechatGroup[]}
     */
    getAvailableGroups: () => SidechatGroup[];
}
//# sourceMappingURL=SidechatAPIClient.d.ts.map