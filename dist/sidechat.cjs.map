{"version":3,"file":"sidechat.cjs","sources":["../classes/SidechatAPIError.js","../index.js"],"sourcesContent":["class SidechatAPIError extends Error {\r\n  constructor(message) {\r\n    super(message);\r\n    this.name = \"SidechatAPIError\";\r\n  }\r\n}\r\n\r\nexport default SidechatAPIError;\r\n","import \"./types/SidechatTypes.js\";\r\nimport SidechatAPIError from \"./classes/SidechatAPIError.js\";\r\nconst defaultHeaders = {\r\n  Accept: \"application/json\",\r\n  \"Content-Type\": \"application/json\",\r\n};\r\n\r\n/**\r\n * Initiate the login process with a phone number.  Should be followed up with verifySMSCode().\r\n * @param {Number} phoneNumber - US phone number (WITHOUT +1) to send verification code to\r\n */\r\nconst loginViaSMS = async (phoneNumber) => {\r\n  try {\r\n    const res = await fetch(`https://api.sidechat.lol/v1/login_register`, {\r\n      method: \"POST\",\r\n      headers: defaultHeaders,\r\n      body: JSON.stringify({\r\n        phone_number: `+1${phoneNumber}`,\r\n        version: 3,\r\n      }),\r\n    });\r\n    const json = await res.json();\r\n    return json;\r\n  } catch (err) {\r\n    console.error(error);\r\n    throw new SidechatAPIError(\"Failed to request SMS verification.\");\r\n  }\r\n};\r\n\r\n/**\r\n * Verify the code sent via SMS with loginViaSMS().\r\n * @param {Number} phoneNumber - US phone number (WITHOUT +1) that verification code was sent to\r\n * @param {String} code  - the verification code\r\n */\r\nconst verifySMSCode = async (phoneNumber, code) => {\r\n  try {\r\n    const res = await fetch(`https://api.sidechat.lol/v1/verify_phone_number`, {\r\n      method: \"POST\",\r\n      headers: defaultHeaders,\r\n      body: JSON.stringify({\r\n        phone_number: `+1${phoneNumber}`,\r\n        code: code.toUpperCase(),\r\n      }),\r\n    });\r\n    const json = await res.json();\r\n    return json;\r\n  } catch (err) {\r\n    console.error(err);\r\n    throw new SidechatAPIError(\"Failed verify this code.\");\r\n  }\r\n};\r\n\r\n/**\r\n * Set the user's age\r\n * @param {Number} age - user's age in years\r\n * @param {String} registrationID  - the registration ID generated by verifySMSCode()\r\n */\r\nconst setAge = async (age, registrationID) => {\r\n  if (age < 13) {\r\n    throw new SidechatAPIError(\"You're too young to use Offsides.\");\r\n  }\r\n  try {\r\n    const res = await fetch(\r\n      `https://api.sidechat.lol/v1/complete_registration`,\r\n      {\r\n        method: \"POST\",\r\n        headers: defaultHeaders,\r\n        body: JSON.stringify({\r\n          age: Number(age),\r\n          registration_id: registrationID,\r\n        }),\r\n      }\r\n    );\r\n    const json = await res.json();\r\n    return json;\r\n  } catch (err) {\r\n    console.error(err);\r\n    throw new SidechatAPIError(\"Failed verify this code.\");\r\n  }\r\n};\r\n\r\n/**\r\n * Initiate the email setup process.  Should be followed up with checkEmailVerification().\r\n * @param {String} email - school email address to send verification code to\r\n * @param {String} token - user bearer token\r\n */\r\nconst registerEmail = async (email, token) => {\r\n  try {\r\n    const res = await fetch(\r\n      `https://api.sidechat.lol/v2/users/register_email`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...defaultHeaders,\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({\r\n          email: email,\r\n        }),\r\n      }\r\n    );\r\n    const json = await res.json();\r\n    if (json.message) {\r\n      throw new SidechatAPIError(json.message);\r\n    }\r\n    return json;\r\n  } catch (err) {\r\n    console.error(error);\r\n    throw new SidechatAPIError(\"Failed to request email verification.\");\r\n  }\r\n};\r\n\r\n/**\r\n * Check is the user's email is verified.\r\n * @param {String} token - user bearer token\r\n */\r\nconst checkEmailVerification = async (token) => {\r\n  try {\r\n    const res = await fetch(\r\n      `https://api.sidechat.lol/v1/users/check_email_verified`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          ...defaultHeaders,\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      }\r\n    );\r\n    const json = await res.json();\r\n    if (json.verified_email_updates_response) {\r\n      return json.verified_email_updates_response;\r\n    } else {\r\n      throw new SidechatAPIError(json?.message || \"Email is not verified.\");\r\n    }\r\n  } catch (err) {\r\n    console.error(error);\r\n    throw new SidechatAPIError(\"Email is not verified.\");\r\n  }\r\n};\r\n\r\n/**\r\n * Set the device ID of the current user\r\n * @param {String} deviceId - the device ID to set\r\n * @param {String} token  - the user bearer token\r\n */\r\nconst setDeviceID = async (deviceID, token) => {\r\n  try {\r\n    const res = await fetch(\r\n      `https://api.sidechat.lol/v1/register_device_token`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...defaultHeaders,\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({\r\n          build_type: \"release\",\r\n          bundle_id: \"com.flowerave.sidechat\",\r\n          device_token: deviceID,\r\n        }),\r\n      }\r\n    );\r\n    const json = await res.json();\r\n    await AsyncStorage.setItem(\"deviceID\", deviceID);\r\n    return json;\r\n  } catch (err) {\r\n    console.error(err);\r\n    throw new SidechatAPIError(\"Failed verify this code.\");\r\n  }\r\n};\r\n\r\n/**\r\n * Get updated status for user and group\r\n * @param {String} token - user bearer token\r\n * @param {String} [groupID] - ID of a specific group to retrieve info from\r\n * @returns\r\n */\r\nconst getUserAndGroup = async (token, groupID = \"\") => {\r\n  try {\r\n    const res = await fetch(\r\n      `https://api.sidechat.lol/v1/updates?group_id=${groupID}`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          ...defaultHeaders,\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      }\r\n    );\r\n    const json = await res.json();\r\n    return json;\r\n  } catch (err) {\r\n    console.error(err);\r\n    throw new SidechatAPIError(`Failed to get posts from group.`);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches posts from the specified category in a group\r\n * @param {String} groupID - group ID\r\n * @param {String} token - user bearer token\r\n * @param {\"hot\"|\"recent\"|\"top\"} category - category to filter posts\r\n * @param {SidechatCursorString} [cursor] - cursor string\r\n * @returns {{posts: SidechatPostOrComment[], cursor: SidechatCursorString}} List of posts and cursor\r\n */\r\nconst getGroupPosts = async (groupID, token, category = \"hot\", cursor) => {\r\n  try {\r\n    const res = await fetch(\r\n      `https://api.sidechat.lol/v1/posts?group_id=${groupID}&type=${category}${\r\n        cursor ? \"&cursor=\" + cursor : \"\"\r\n      }`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          ...defaultHeaders,\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      }\r\n    );\r\n    const json = await res.json();\r\n    return json;\r\n  } catch (err) {\r\n    console.error(err);\r\n    throw new SidechatAPIError(`Failed to get posts from group.`);\r\n  }\r\n};\r\n\r\n/**\r\n * Upvote or downvote, or unvote a post\r\n * @param {String} postID - post ID to vote on\r\n * @param {String} token - user bearer token\r\n * @param {SidechatVoteString} action - whether to upvote, downvote, or reset vote\r\n * @returns\r\n */\r\nconst setVote = async (postID, token, action) => {\r\n  try {\r\n    const res = await fetch(`https://api.sidechat.lol/v1/posts/set_vote`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        ...defaultHeaders,\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify({\r\n        post_id: postID,\r\n        vote_status: action,\r\n      }),\r\n    });\r\n    const json = await res.json();\r\n    return json;\r\n  } catch (err) {\r\n    console.error(err);\r\n    throw new SidechatAPIError(`Failed to change the vote on post.`);\r\n  }\r\n};\r\n\r\n/**\r\n * Get all the commments on a post\r\n * @param {String} postID - post ID to get comments for\r\n * @param {String} token - user bearer token\r\n * @returns {SidechatPostOrComment[]} list of comments\r\n */\r\nconst getPostComments = async (postID, token) => {\r\n  try {\r\n    const res = await fetch(\r\n      `https://api.sidechat.lol/v1/posts/comments/?post_id=${postID}`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          ...defaultHeaders,\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      }\r\n    );\r\n    const json = await res.json();\r\n    // Function to preprocess the comments and organize them into a nested structure\r\n    function preprocessComments(apiComments) {\r\n      // Map to store comments by their IDs for efficient lookup\r\n      const commentMap = new Map();\r\n      // List to store top-level comments\r\n      const topLevelComments = [];\r\n\r\n      // Iterate through the API comments\r\n      apiComments.forEach((comment) => {\r\n        // Store the comment in the map with its ID as the key\r\n        commentMap.set(comment.id, comment);\r\n        // Get the parent comment using the reply_post_id\r\n        const parentComment = commentMap.get(comment.reply_post_id);\r\n        // Check if the comment is a top-level comment\r\n        if (\r\n          !parentComment ||\r\n          comment.reply_post_id === comment.parent_post_id\r\n        ) {\r\n          // If it's a top-level comment, push it to the topLevelComments array\r\n          topLevelComments.push(comment);\r\n        } else {\r\n          // If it's a reply, add it to the parent comment's replies array\r\n          if (!parentComment.replies) parentComment.replies = [];\r\n          parentComment.replies.push(comment);\r\n        }\r\n      });\r\n\r\n      // Flatten the nested structure and return a single list of comments\r\n      return flattenComments(topLevelComments);\r\n    }\r\n\r\n    // Function to flatten nested comments into a single list\r\n    function flattenComments(comments) {\r\n      // Use reduce to flatten the nested comments array into a single list\r\n      return comments.reduce((flatComments, comment) => {\r\n        // Push the current comment to the flatComments array\r\n        flatComments.push(comment);\r\n        // If the current comment has replies, recursively flatten them and push to the flatComments array\r\n        if (comment.replies)\r\n          flatComments.push(...flattenComments(comment.replies));\r\n        // Return the flatComments array\r\n        return flatComments;\r\n      }, []);\r\n    }\r\n\r\n    const sortedComments = preprocessComments(json.posts);\r\n    return sortedComments;\r\n  } catch (err) {\r\n    console.error(err);\r\n    throw new SidechatAPIError(`Failed to get comments on post.`);\r\n  }\r\n};\r\n\r\n/**\r\n * Gets groups to be displayed on the \"Explore Groups\" page\r\n * @param {String} token - user bearer token\r\n * @returns {SidechatGroup}\r\n */\r\nconst getAvailableGroups = async (token) => {\r\n  try {\r\n    const res = await fetch(`https://api.sidechat.lol/v1/groups/explore`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        ...defaultHeaders,\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    const json = await res.json();\r\n    return json.groups;\r\n  } catch (err) {\r\n    console.error(err);\r\n    throw new SidechatAPIError(`Failed to get groups from explore.`);\r\n  }\r\n};\r\n\r\nexport {\r\n  loginViaSMS,\r\n  verifySMSCode,\r\n  setAge,\r\n  setDeviceID,\r\n  registerEmail,\r\n  checkEmailVerification,\r\n  getUserAndGroup,\r\n  getGroupPosts,\r\n  setVote,\r\n  getPostComments,\r\n  getAvailableGroups,\r\n};\r\n"],"names":["SidechatAPIError","_Error","message","_this","call","name","_wrapNativeSuper","Error","_catch","body","recover","result","e","then","defaultHeaders","Accept","token","Promise","resolve","fetch","method","headers","_extends","Authorization","res","json","verified_email_updates_response","console","error","reject","groups","err","groupID","category","cursor","postID","preprocessComments","apiComments","commentMap","Map","topLevelComments","forEach","comment","set","id","parentComment","get","reply_post_id","parent_post_id","replies","push","flattenComments","comments","reduce","flatComments","apply","posts","phoneNumber","JSON","stringify","phone_number","version","email","age","registrationID","Number","registration_id","deviceID","build_type","bundle_id","device_token","AsyncStorage","setItem","action","post_id","vote_status","code","toUpperCase"],"mappings":"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"}