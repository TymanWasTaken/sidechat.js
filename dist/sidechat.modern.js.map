{"version":3,"file":"sidechat.modern.js","sources":["../src/classes/SidechatAPIError.js","../src/classes/SidechatAPIClient.js"],"sourcesContent":["class SidechatAPIError extends Error {\r\n  constructor(message) {\r\n    super(message);\r\n    this.name = \"SidechatAPIError\";\r\n  }\r\n}\r\n\r\nexport default SidechatAPIError;\r\n","import \"../types/SidechatTypes.js\";\r\nimport SidechatAPIError from \"../classes/SidechatAPIError.js\";\r\n\r\n/**\r\n * API client class for making requests to Sidechat's private API.  As of now all methods are static.\r\n * @class\r\n * @since 2.0.0-alpha.0\r\n * @todo Add functionality for constructing a client with or without a token and having it keep track of requests/caching, etc\r\n */\r\nclass SidechatAPIClient {\r\n  static defaultHeaders = {\r\n    Accept: \"application/json\",\r\n    \"Content-Type\": \"application/json\",\r\n  };\r\n\r\n  /**\r\n   * Initiate the login process with a phone number.  Should be followed up with verifySMSCode().\r\n   * @method\r\n   * @param {Number} phoneNumber - US phone number (WITHOUT +1) to send verification code to\r\n   */\r\n  static loginViaSMS = async (phoneNumber) => {\r\n    try {\r\n      const res = await fetch(`https://api.sidechat.lol/v1/login_register`, {\r\n        method: \"POST\",\r\n        headers: defaultHeaders,\r\n        body: JSON.stringify({\r\n          phone_number: `+1${phoneNumber}`,\r\n          version: 3,\r\n        }),\r\n      });\r\n      const json = await res.json();\r\n      return json;\r\n    } catch (err) {\r\n      console.error(error);\r\n      throw new SidechatAPIError(\"Failed to request SMS verification.\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Verify the code sent via SMS with loginViaSMS().\r\n   * @method\r\n   * @param {Number} phoneNumber - US phone number (WITHOUT +1) that verification code was sent to\r\n   * @param {String} code  - the verification code\r\n   */\r\n  static verifySMSCode = async (phoneNumber, code) => {\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.sidechat.lol/v1/verify_phone_number`,\r\n        {\r\n          method: \"POST\",\r\n          headers: defaultHeaders,\r\n          body: JSON.stringify({\r\n            phone_number: `+1${phoneNumber}`,\r\n            code: code.toUpperCase(),\r\n          }),\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      return json;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new SidechatAPIError(\"Failed verify this code.\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Set the user's age\r\n   * @method\r\n   * @param {Number} age - user's age in years\r\n   * @param {String} registrationID  - the registration ID generated by verifySMSCode()\r\n   */\r\n  static setAge = async (age, registrationID) => {\r\n    if (age < 13) {\r\n      throw new SidechatAPIError(\"You're too young to use Offsides.\");\r\n    }\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.sidechat.lol/v1/complete_registration`,\r\n        {\r\n          method: \"POST\",\r\n          headers: defaultHeaders,\r\n          body: JSON.stringify({\r\n            age: Number(age),\r\n            registration_id: registrationID,\r\n          }),\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      return json;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new SidechatAPIError(\"Failed verify this code.\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Initiate the email setup process.  Should be followed up with checkEmailVerification().\r\n   * @method\r\n   * @param {String} email - school email address to send verification code to\r\n   * @param {String} token - user bearer token\r\n   */\r\n  static registerEmail = async (email, token) => {\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.sidechat.lol/v2/users/register_email`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...defaultHeaders,\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n          body: JSON.stringify({\r\n            email: email,\r\n          }),\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      if (json.message) {\r\n        throw new SidechatAPIError(json.message);\r\n      }\r\n      return json;\r\n    } catch (err) {\r\n      console.error(error);\r\n      throw new SidechatAPIError(\"Failed to request email verification.\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Check is the user's email is verified.\r\n   * @method\r\n   * @param {String} token - user bearer token\r\n   */\r\n  static checkEmailVerification = async (token) => {\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.sidechat.lol/v1/users/check_email_verified`,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            ...defaultHeaders,\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      if (json.verified_email_updates_response) {\r\n        return json.verified_email_updates_response;\r\n      } else {\r\n        throw new SidechatAPIError(json?.message || \"Email is not verified.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(error);\r\n      throw new SidechatAPIError(\"Email is not verified.\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Set the device ID of the current user\r\n   * @method\r\n   * @param {String} deviceId - the device ID to set\r\n   * @param {String} token  - the user bearer token\r\n   */\r\n  static setDeviceID = async (deviceID, token) => {\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.sidechat.lol/v1/register_device_token`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...defaultHeaders,\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n          body: JSON.stringify({\r\n            build_type: \"release\",\r\n            bundle_id: \"com.flowerave.sidechat\",\r\n            device_token: deviceID,\r\n          }),\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      await AsyncStorage.setItem(\"deviceID\", deviceID);\r\n      return json;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new SidechatAPIError(\"Failed verify this code.\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get updated status for user and group\r\n   * @method\r\n   * @param {String} token - user bearer token\r\n   * @param {String} [groupID] - ID of a specific group to retrieve info from\r\n   */\r\n  static getUserAndGroup = async (token, groupID = \"\") => {\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.sidechat.lol/v1/updates?group_id=${groupID}`,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            ...defaultHeaders,\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      return json;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new SidechatAPIError(`Failed to get posts from group.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Fetches posts from the specified category in a group\r\n   * @method\r\n   * @param {String} groupID - group ID\r\n   * @param {String} token - user bearer token\r\n   * @param {\"hot\"|\"recent\"|\"top\"} category - category to filter posts\r\n   * @param {SidechatCursorString} [cursor] - cursor string\r\n   * @returns {{posts: SidechatPostOrComment[], cursor: SidechatCursorString}} List of posts and cursor\r\n   */\r\n  static getGroupPosts = async (groupID, token, category = \"hot\", cursor) => {\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.sidechat.lol/v1/posts?group_id=${groupID}&type=${category}${\r\n          cursor ? \"&cursor=\" + cursor : \"\"\r\n        }`,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            ...defaultHeaders,\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      return json;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new SidechatAPIError(`Failed to get posts from group.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Upvote or downvote, or unvote a post\r\n   * @method\r\n   * @param {String} postID - post ID to vote on\r\n   * @param {String} token - user bearer token\r\n   * @param {SidechatVoteString} action - whether to upvote, downvote, or reset vote\r\n   */\r\n  static setVote = async (postID, token, action) => {\r\n    try {\r\n      const res = await fetch(`https://api.sidechat.lol/v1/posts/set_vote`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...defaultHeaders,\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({\r\n          post_id: postID,\r\n          vote_status: action,\r\n        }),\r\n      });\r\n      const json = await res.json();\r\n      return json;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new SidechatAPIError(`Failed to change the vote on post.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get all the commments on a post\r\n   * @method\r\n   * @param {String} postID - post ID to get comments for\r\n   * @param {String} token - user bearer token\r\n   * @returns {SidechatPostOrComment[]} list of comments\r\n   */\r\n  static getPostComments = async (postID, token) => {\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.sidechat.lol/v1/posts/comments/?post_id=${postID}`,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            ...defaultHeaders,\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      // Function to preprocess the comments and organize them into a nested structure\r\n      function preprocessComments(apiComments) {\r\n        // Map to store comments by their IDs for efficient lookup\r\n        const commentMap = new Map();\r\n        // List to store top-level comments\r\n        const topLevelComments = [];\r\n\r\n        // Iterate through the API comments\r\n        apiComments.forEach((comment) => {\r\n          // Store the comment in the map with its ID as the key\r\n          commentMap.set(comment.id, comment);\r\n          // Get the parent comment using the reply_post_id\r\n          const parentComment = commentMap.get(comment.reply_post_id);\r\n          // Check if the comment is a top-level comment\r\n          if (\r\n            !parentComment ||\r\n            comment.reply_post_id === comment.parent_post_id\r\n          ) {\r\n            // If it's a top-level comment, push it to the topLevelComments array\r\n            topLevelComments.push(comment);\r\n          } else {\r\n            // If it's a reply, add it to the parent comment's replies array\r\n            if (!parentComment.replies) parentComment.replies = [];\r\n            parentComment.replies.push(comment);\r\n          }\r\n        });\r\n\r\n        // Flatten the nested structure and return a single list of comments\r\n        return flattenComments(topLevelComments);\r\n      }\r\n\r\n      // Function to flatten nested comments into a single list\r\n      function flattenComments(comments) {\r\n        // Use reduce to flatten the nested comments array into a single list\r\n        return comments.reduce((flatComments, comment) => {\r\n          // Push the current comment to the flatComments array\r\n          flatComments.push(comment);\r\n          // If the current comment has replies, recursively flatten them and push to the flatComments array\r\n          if (comment.replies)\r\n            flatComments.push(...flattenComments(comment.replies));\r\n          // Return the flatComments array\r\n          return flatComments;\r\n        }, []);\r\n      }\r\n\r\n      const sortedComments = preprocessComments(json.posts);\r\n      return sortedComments;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new SidechatAPIError(`Failed to get comments on post.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Gets groups to be displayed on the \"Explore Groups\" page\r\n   * @method\r\n   * @param {String} token - user bearer token\r\n   * @returns {SidechatGroup}\r\n   */\r\n  static getAvailableGroups = async (token) => {\r\n    try {\r\n      const res = await fetch(`https://api.sidechat.lol/v1/groups/explore`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          ...defaultHeaders,\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      const json = await res.json();\r\n      return json.groups;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new SidechatAPIError(`Failed to get groups from explore.`);\r\n    }\r\n  };\r\n}\r\n\r\nexport default SidechatAPIClient;\r\n"],"names":["SidechatAPIError","Error","constructor","message","super","this","name","SidechatAPIClient","defaultHeaders","Accept","loginViaSMS","async","res","fetch","method","headers","body","JSON","stringify","phone_number","phoneNumber","version","json","err","console","error","verifySMSCode","code","toUpperCase","setAge","age","registrationID","Number","registration_id","registerEmail","email","token","_extends","Authorization","checkEmailVerification","verified_email_updates_response","setDeviceID","deviceID","build_type","bundle_id","device_token","AsyncStorage","setItem","getUserAndGroup","groupID","getGroupPosts","category","cursor","setVote","postID","action","post_id","vote_status","getPostComments","preprocessComments","apiComments","commentMap","Map","topLevelComments","forEach","comment","set","id","parentComment","get","reply_post_id","parent_post_id","replies","push","flattenComments","comments","reduce","flatComments","posts","getAvailableGroups","groups"],"mappings":"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"}