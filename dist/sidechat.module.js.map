{"version":3,"file":"sidechat.module.js","sources":["../classes/SidechatAPIError.js","../index.js"],"sourcesContent":["class SidechatAPIError extends Error {\r\n  constructor(message) {\r\n    super(message);\r\n    this.name = \"SidechatAPIError\";\r\n  }\r\n}\r\n\r\nexport default SidechatAPIError;\r\n","import \"./types/SidechatTypes.js\";\r\nimport SidechatAPIError from \"./classes/SidechatAPIError.js\";\r\nconst defaultHeaders = {\r\n  Accept: \"application/json\",\r\n  \"Content-Type\": \"application/json\",\r\n};\r\n\r\n/**\r\n * Initiate the login process with a phone number.  Should be followed up with verifySMSCode().\r\n * @param {Number} phoneNumber - US phone number (WITHOUT +1) to send verification code to\r\n */\r\nconst loginViaSMS = async (phoneNumber) => {\r\n  try {\r\n    const res = await fetch(`https://api.sidechat.lol/v1/login_register`, {\r\n      method: \"POST\",\r\n      headers: defaultHeaders,\r\n      body: JSON.stringify({\r\n        phone_number: `+1${phoneNumber}`,\r\n        version: 3,\r\n      }),\r\n    });\r\n    const json = await res.json();\r\n    return json;\r\n  } catch (err) {\r\n    console.error(error);\r\n    throw new SidechatAPIError(\"Failed to request SMS verification.\");\r\n  }\r\n};\r\n\r\n/**\r\n * Verify the code sent via SMS with loginViaSMS().\r\n * @param {Number} phoneNumber - US phone number (WITHOUT +1) that verification code was sent to\r\n * @param {String} code  - the verification code\r\n */\r\nconst verifySMSCode = async (phoneNumber, code) => {\r\n  try {\r\n    const res = await fetch(`https://api.sidechat.lol/v1/verify_phone_number`, {\r\n      method: \"POST\",\r\n      headers: defaultHeaders,\r\n      body: JSON.stringify({\r\n        phone_number: `+1${phoneNumber}`,\r\n        code: code.toUpperCase(),\r\n      }),\r\n    });\r\n    const json = await res.json();\r\n    return json;\r\n  } catch (err) {\r\n    console.error(err);\r\n    throw new SidechatAPIError(\"Failed verify this code.\");\r\n  }\r\n};\r\n\r\n/**\r\n * Set the user's age\r\n * @param {Number} age - user's age in years\r\n * @param {String} registrationID  - the registration ID generated by verifySMSCode()\r\n */\r\nconst setAge = async (age, registrationID) => {\r\n  if (age < 13) {\r\n    throw new SidechatAPIError(\"You're too young to use Offsides.\");\r\n  }\r\n  try {\r\n    const res = await fetch(\r\n      `https://api.sidechat.lol/v1/complete_registration`,\r\n      {\r\n        method: \"POST\",\r\n        headers: defaultHeaders,\r\n        body: JSON.stringify({\r\n          age: Number(age),\r\n          registration_id: registrationID,\r\n        }),\r\n      }\r\n    );\r\n    const json = await res.json();\r\n    return json;\r\n  } catch (err) {\r\n    console.error(err);\r\n    throw new SidechatAPIError(\"Failed verify this code.\");\r\n  }\r\n};\r\n\r\n/**\r\n * Initiate the email setup process.  Should be followed up with checkEmailVerification().\r\n * @param {String} email - school email address to send verification code to\r\n * @param {String} token - user bearer token\r\n */\r\nconst registerEmail = async (email, token) => {\r\n  try {\r\n    const res = await fetch(\r\n      `https://api.sidechat.lol/v2/users/register_email`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...defaultHeaders,\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({\r\n          email: email,\r\n        }),\r\n      }\r\n    );\r\n    const json = await res.json();\r\n    if (json.message) {\r\n      throw new SidechatAPIError(json.message);\r\n    }\r\n    return json;\r\n  } catch (err) {\r\n    console.error(error);\r\n    throw new SidechatAPIError(\"Failed to request email verification.\");\r\n  }\r\n};\r\n\r\n/**\r\n * Check is the user's email is verified.\r\n * @param {String} token - user bearer token\r\n */\r\nconst checkEmailVerification = async (token) => {\r\n  try {\r\n    const res = await fetch(\r\n      `https://api.sidechat.lol/v1/users/check_email_verified`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          ...defaultHeaders,\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      }\r\n    );\r\n    const json = await res.json();\r\n    if (json.verified_email_updates_response) {\r\n      return json.verified_email_updates_response;\r\n    } else {\r\n      throw new SidechatAPIError(json?.message || \"Email is not verified.\");\r\n    }\r\n  } catch (err) {\r\n    console.error(error);\r\n    throw new SidechatAPIError(\"Email is not verified.\");\r\n  }\r\n};\r\n\r\n/**\r\n * Set the device ID of the current user\r\n * @param {String} deviceId - the device ID to set\r\n * @param {String} token  - the user bearer token\r\n */\r\nconst setDeviceID = async (deviceID, token) => {\r\n  try {\r\n    const res = await fetch(\r\n      `https://api.sidechat.lol/v1/register_device_token`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...defaultHeaders,\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({\r\n          build_type: \"release\",\r\n          bundle_id: \"com.flowerave.sidechat\",\r\n          device_token: deviceID,\r\n        }),\r\n      }\r\n    );\r\n    const json = await res.json();\r\n    await AsyncStorage.setItem(\"deviceID\", deviceID);\r\n    return json;\r\n  } catch (err) {\r\n    console.error(err);\r\n    throw new SidechatAPIError(\"Failed verify this code.\");\r\n  }\r\n};\r\n\r\n/**\r\n * Get updated status for user and group\r\n * @param {String} token - user bearer token\r\n * @param {String} [groupID] - ID of a specific group to retrieve info from\r\n * @returns\r\n */\r\nconst getUserAndGroup = async (token, groupID = \"\") => {\r\n  try {\r\n    const res = await fetch(\r\n      `https://api.sidechat.lol/v1/updates?group_id=${groupID}`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          ...defaultHeaders,\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      }\r\n    );\r\n    const json = await res.json();\r\n    return json;\r\n  } catch (err) {\r\n    console.error(err);\r\n    throw new SidechatAPIError(`Failed to get posts from group.`);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches posts from the specified category in a group\r\n * @param {String} groupID - group ID\r\n * @param {String} token - user bearer token\r\n * @param {\"hot\"|\"recent\"|\"top\"} category - category to filter posts\r\n * @param {SidechatCursorString} [cursor] - cursor string\r\n * @returns {{posts: SidechatPostOrComment[], cursor: SidechatCursorString}} List of posts and cursor\r\n */\r\nconst getGroupPosts = async (groupID, token, category = \"hot\", cursor) => {\r\n  try {\r\n    const res = await fetch(\r\n      `https://api.sidechat.lol/v1/posts?group_id=${groupID}&type=${category}${\r\n        cursor ? \"&cursor=\" + cursor : \"\"\r\n      }`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          ...defaultHeaders,\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      }\r\n    );\r\n    const json = await res.json();\r\n    return json;\r\n  } catch (err) {\r\n    console.error(err);\r\n    throw new SidechatAPIError(`Failed to get posts from group.`);\r\n  }\r\n};\r\n\r\n/**\r\n * Upvote or downvote, or unvote a post\r\n * @param {String} postID - post ID to vote on\r\n * @param {String} token - user bearer token\r\n * @param {SidechatVoteString} action - whether to upvote, downvote, or reset vote\r\n * @returns\r\n */\r\nconst setVote = async (postID, token, action) => {\r\n  try {\r\n    const res = await fetch(`https://api.sidechat.lol/v1/posts/set_vote`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        ...defaultHeaders,\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify({\r\n        post_id: postID,\r\n        vote_status: action,\r\n      }),\r\n    });\r\n    const json = await res.json();\r\n    return json;\r\n  } catch (err) {\r\n    console.error(err);\r\n    throw new SidechatAPIError(`Failed to change the vote on post.`);\r\n  }\r\n};\r\n\r\n/**\r\n * Get all the commments on a post\r\n * @param {String} postID - post ID to get comments for\r\n * @param {String} token - user bearer token\r\n * @returns {SidechatPostOrComment[]} list of comments\r\n */\r\nconst getPostComments = async (postID, token) => {\r\n  try {\r\n    const res = await fetch(\r\n      `https://api.sidechat.lol/v1/posts/comments/?post_id=${postID}`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          ...defaultHeaders,\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      }\r\n    );\r\n    const json = await res.json();\r\n    // Function to preprocess the comments and organize them into a nested structure\r\n    function preprocessComments(apiComments) {\r\n      // Map to store comments by their IDs for efficient lookup\r\n      const commentMap = new Map();\r\n      // List to store top-level comments\r\n      const topLevelComments = [];\r\n\r\n      // Iterate through the API comments\r\n      apiComments.forEach((comment) => {\r\n        // Store the comment in the map with its ID as the key\r\n        commentMap.set(comment.id, comment);\r\n        // Get the parent comment using the reply_post_id\r\n        const parentComment = commentMap.get(comment.reply_post_id);\r\n        // Check if the comment is a top-level comment\r\n        if (\r\n          !parentComment ||\r\n          comment.reply_post_id === comment.parent_post_id\r\n        ) {\r\n          // If it's a top-level comment, push it to the topLevelComments array\r\n          topLevelComments.push(comment);\r\n        } else {\r\n          // If it's a reply, add it to the parent comment's replies array\r\n          if (!parentComment.replies) parentComment.replies = [];\r\n          parentComment.replies.push(comment);\r\n        }\r\n      });\r\n\r\n      // Flatten the nested structure and return a single list of comments\r\n      return flattenComments(topLevelComments);\r\n    }\r\n\r\n    // Function to flatten nested comments into a single list\r\n    function flattenComments(comments) {\r\n      // Use reduce to flatten the nested comments array into a single list\r\n      return comments.reduce((flatComments, comment) => {\r\n        // Push the current comment to the flatComments array\r\n        flatComments.push(comment);\r\n        // If the current comment has replies, recursively flatten them and push to the flatComments array\r\n        if (comment.replies)\r\n          flatComments.push(...flattenComments(comment.replies));\r\n        // Return the flatComments array\r\n        return flatComments;\r\n      }, []);\r\n    }\r\n\r\n    const sortedComments = preprocessComments(json.posts);\r\n    return sortedComments;\r\n  } catch (err) {\r\n    console.error(err);\r\n    throw new SidechatAPIError(`Failed to get comments on post.`);\r\n  }\r\n};\r\n\r\n/**\r\n * Gets groups to be displayed on the \"Explore Groups\" page\r\n * @param {String} token - user bearer token\r\n * @returns {SidechatGroup}\r\n */\r\nconst getAvailableGroups = async (token) => {\r\n  try {\r\n    const res = await fetch(`https://api.sidechat.lol/v1/groups/explore`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        ...defaultHeaders,\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    const json = await res.json();\r\n    return json.groups;\r\n  } catch (err) {\r\n    console.error(err);\r\n    throw new SidechatAPIError(`Failed to get groups from explore.`);\r\n  }\r\n};\r\n\r\nexport {\r\n  loginViaSMS,\r\n  verifySMSCode,\r\n  setAge,\r\n  setDeviceID,\r\n  registerEmail,\r\n  checkEmailVerification,\r\n  getUserAndGroup,\r\n  getGroupPosts,\r\n  setVote,\r\n  getPostComments,\r\n  getAvailableGroups,\r\n};\r\n"],"names":["SidechatAPIError","_Error","message","_this","call","name","_wrapNativeSuper","Error","_catch","body","recover","result","e","then","defaultHeaders","Accept","loginViaSMS","phoneNumber","Promise","resolve","fetch","method","headers","JSON","stringify","phone_number","version","res","json","console","error","reject","verifySMSCode","code","toUpperCase","err","setAge","age","registrationID","Number","registration_id","registerEmail","email","token","_extends","Authorization","checkEmailVerification","verified_email_updates_response","setDeviceID","deviceID","build_type","bundle_id","device_token","AsyncStorage","setItem","getUserAndGroup","groupID","getGroupPosts","category","cursor","setVote","postID","action","post_id","vote_status","getPostComments","preprocessComments","apiComments","commentMap","Map","topLevelComments","forEach","comment","set","id","parentComment","get","reply_post_id","parent_post_id","replies","push","flattenComments","comments","reduce","flatComments","apply","posts","getAvailableGroups","groups"],"mappings":"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"}