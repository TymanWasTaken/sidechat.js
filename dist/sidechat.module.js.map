{"version":3,"file":"sidechat.module.js","sources":["../src/classes/SidechatAPIError.js","../src/classes/SidechatAPIClient.js"],"sourcesContent":["class SidechatAPIError extends Error {\r\n  constructor(message) {\r\n    super(message);\r\n    this.name = \"SidechatAPIError\";\r\n  }\r\n}\r\n\r\nexport default SidechatAPIError;\r\n","import \"../types/SidechatTypes.js\";\r\nimport SidechatAPIError from \"../classes/SidechatAPIError.js\";\r\n\r\n/**\r\n * API client class for making requests to Sidechat's private API.  As of now all methods are static.\r\n * @class\r\n * @since 2.0.0-alpha.0\r\n * @todo Add functionality for constructing a client with or without a token and having it keep track of requests/caching, etc\r\n */\r\nclass SidechatAPIClient {\r\n  static defaultHeaders = {\r\n    Accept: \"application/json\",\r\n    \"Content-Type\": \"application/json\",\r\n  };\r\n\r\n  /**\r\n   * Initiate the login process with a phone number.  Should be followed up with verifySMSCode().\r\n   * @method\r\n   * @param {Number} phoneNumber - US phone number (WITHOUT +1) to send verification code to\r\n   */\r\n  static loginViaSMS = async (phoneNumber) => {\r\n    try {\r\n      const res = await fetch(`https://api.sidechat.lol/v1/login_register`, {\r\n        method: \"POST\",\r\n        headers: defaultHeaders,\r\n        body: JSON.stringify({\r\n          phone_number: `+1${phoneNumber}`,\r\n          version: 3,\r\n        }),\r\n      });\r\n      const json = await res.json();\r\n      return json;\r\n    } catch (err) {\r\n      console.error(error);\r\n      throw new SidechatAPIError(\"Failed to request SMS verification.\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Verify the code sent via SMS with loginViaSMS().\r\n   * @method\r\n   * @param {Number} phoneNumber - US phone number (WITHOUT +1) that verification code was sent to\r\n   * @param {String} code  - the verification code\r\n   */\r\n  static verifySMSCode = async (phoneNumber, code) => {\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.sidechat.lol/v1/verify_phone_number`,\r\n        {\r\n          method: \"POST\",\r\n          headers: defaultHeaders,\r\n          body: JSON.stringify({\r\n            phone_number: `+1${phoneNumber}`,\r\n            code: code.toUpperCase(),\r\n          }),\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      return json;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new SidechatAPIError(\"Failed verify this code.\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Set the user's age\r\n   * @method\r\n   * @param {Number} age - user's age in years\r\n   * @param {String} registrationID  - the registration ID generated by verifySMSCode()\r\n   */\r\n  static setAge = async (age, registrationID) => {\r\n    if (age < 13) {\r\n      throw new SidechatAPIError(\"You're too young to use Offsides.\");\r\n    }\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.sidechat.lol/v1/complete_registration`,\r\n        {\r\n          method: \"POST\",\r\n          headers: defaultHeaders,\r\n          body: JSON.stringify({\r\n            age: Number(age),\r\n            registration_id: registrationID,\r\n          }),\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      return json;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new SidechatAPIError(\"Failed verify this code.\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Initiate the email setup process.  Should be followed up with checkEmailVerification().\r\n   * @method\r\n   * @param {String} email - school email address to send verification code to\r\n   * @param {String} token - user bearer token\r\n   */\r\n  static registerEmail = async (email, token) => {\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.sidechat.lol/v2/users/register_email`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...defaultHeaders,\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n          body: JSON.stringify({\r\n            email: email,\r\n          }),\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      if (json.message) {\r\n        throw new SidechatAPIError(json.message);\r\n      }\r\n      return json;\r\n    } catch (err) {\r\n      console.error(error);\r\n      throw new SidechatAPIError(\"Failed to request email verification.\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Check is the user's email is verified.\r\n   * @method\r\n   * @param {String} token - user bearer token\r\n   */\r\n  static checkEmailVerification = async (token) => {\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.sidechat.lol/v1/users/check_email_verified`,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            ...defaultHeaders,\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      if (json.verified_email_updates_response) {\r\n        return json.verified_email_updates_response;\r\n      } else {\r\n        throw new SidechatAPIError(json?.message || \"Email is not verified.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(error);\r\n      throw new SidechatAPIError(\"Email is not verified.\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Set the device ID of the current user\r\n   * @method\r\n   * @param {String} deviceId - the device ID to set\r\n   * @param {String} token  - the user bearer token\r\n   */\r\n  static setDeviceID = async (deviceID, token) => {\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.sidechat.lol/v1/register_device_token`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...defaultHeaders,\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n          body: JSON.stringify({\r\n            build_type: \"release\",\r\n            bundle_id: \"com.flowerave.sidechat\",\r\n            device_token: deviceID,\r\n          }),\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      await AsyncStorage.setItem(\"deviceID\", deviceID);\r\n      return json;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new SidechatAPIError(\"Failed verify this code.\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get updated status for user and group\r\n   * @method\r\n   * @param {String} token - user bearer token\r\n   * @param {String} [groupID] - ID of a specific group to retrieve info from\r\n   */\r\n  static getUserAndGroup = async (token, groupID = \"\") => {\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.sidechat.lol/v1/updates?group_id=${groupID}`,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            ...defaultHeaders,\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      return json;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new SidechatAPIError(`Failed to get posts from group.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Fetches posts from the specified category in a group\r\n   * @method\r\n   * @param {String} groupID - group ID\r\n   * @param {String} token - user bearer token\r\n   * @param {\"hot\"|\"recent\"|\"top\"} category - category to filter posts\r\n   * @param {SidechatCursorString} [cursor] - cursor string\r\n   * @returns {{posts: SidechatPostOrComment[], cursor: SidechatCursorString}} List of posts and cursor\r\n   */\r\n  static getGroupPosts = async (groupID, token, category = \"hot\", cursor) => {\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.sidechat.lol/v1/posts?group_id=${groupID}&type=${category}${\r\n          cursor ? \"&cursor=\" + cursor : \"\"\r\n        }`,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            ...defaultHeaders,\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      return json;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new SidechatAPIError(`Failed to get posts from group.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Upvote or downvote, or unvote a post\r\n   * @method\r\n   * @param {String} postID - post ID to vote on\r\n   * @param {String} token - user bearer token\r\n   * @param {SidechatVoteString} action - whether to upvote, downvote, or reset vote\r\n   */\r\n  static setVote = async (postID, token, action) => {\r\n    try {\r\n      const res = await fetch(`https://api.sidechat.lol/v1/posts/set_vote`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...defaultHeaders,\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({\r\n          post_id: postID,\r\n          vote_status: action,\r\n        }),\r\n      });\r\n      const json = await res.json();\r\n      return json;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new SidechatAPIError(`Failed to change the vote on post.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get all the commments on a post\r\n   * @method\r\n   * @param {String} postID - post ID to get comments for\r\n   * @param {String} token - user bearer token\r\n   * @returns {SidechatPostOrComment[]} list of comments\r\n   */\r\n  static getPostComments = async (postID, token) => {\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.sidechat.lol/v1/posts/comments/?post_id=${postID}`,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            ...defaultHeaders,\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      // Function to preprocess the comments and organize them into a nested structure\r\n      function preprocessComments(apiComments) {\r\n        // Map to store comments by their IDs for efficient lookup\r\n        const commentMap = new Map();\r\n        // List to store top-level comments\r\n        const topLevelComments = [];\r\n\r\n        // Iterate through the API comments\r\n        apiComments.forEach((comment) => {\r\n          // Store the comment in the map with its ID as the key\r\n          commentMap.set(comment.id, comment);\r\n          // Get the parent comment using the reply_post_id\r\n          const parentComment = commentMap.get(comment.reply_post_id);\r\n          // Check if the comment is a top-level comment\r\n          if (\r\n            !parentComment ||\r\n            comment.reply_post_id === comment.parent_post_id\r\n          ) {\r\n            // If it's a top-level comment, push it to the topLevelComments array\r\n            topLevelComments.push(comment);\r\n          } else {\r\n            // If it's a reply, add it to the parent comment's replies array\r\n            if (!parentComment.replies) parentComment.replies = [];\r\n            parentComment.replies.push(comment);\r\n          }\r\n        });\r\n\r\n        // Flatten the nested structure and return a single list of comments\r\n        return flattenComments(topLevelComments);\r\n      }\r\n\r\n      // Function to flatten nested comments into a single list\r\n      function flattenComments(comments) {\r\n        // Use reduce to flatten the nested comments array into a single list\r\n        return comments.reduce((flatComments, comment) => {\r\n          // Push the current comment to the flatComments array\r\n          flatComments.push(comment);\r\n          // If the current comment has replies, recursively flatten them and push to the flatComments array\r\n          if (comment.replies)\r\n            flatComments.push(...flattenComments(comment.replies));\r\n          // Return the flatComments array\r\n          return flatComments;\r\n        }, []);\r\n      }\r\n\r\n      const sortedComments = preprocessComments(json.posts);\r\n      return sortedComments;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new SidechatAPIError(`Failed to get comments on post.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Gets groups to be displayed on the \"Explore Groups\" page\r\n   * @method\r\n   * @param {String} token - user bearer token\r\n   * @returns {SidechatGroup}\r\n   */\r\n  static getAvailableGroups = async (token) => {\r\n    try {\r\n      const res = await fetch(`https://api.sidechat.lol/v1/groups/explore`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          ...defaultHeaders,\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      const json = await res.json();\r\n      return json.groups;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new SidechatAPIError(`Failed to get groups from explore.`);\r\n    }\r\n  };\r\n}\r\n\r\nexport default SidechatAPIClient;\r\n"],"names":["SidechatAPIError","_Error","message","_this","call","name","_wrapNativeSuper","Error","_catch","body","recover","result","e","then","SidechatAPIClient","defaultHeaders","Accept","loginViaSMS","phoneNumber","Promise","resolve","fetch","method","headers","JSON","stringify","phone_number","version","res","json","console","error","reject","verifySMSCode","code","toUpperCase","err","setAge","age","registrationID","Number","registration_id","registerEmail","email","token","_extends","Authorization","checkEmailVerification","verified_email_updates_response","setDeviceID","deviceID","build_type","bundle_id","device_token","AsyncStorage","setItem","getUserAndGroup","groupID","getGroupPosts","category","cursor","setVote","postID","action","post_id","vote_status","getPostComments","preprocessComments","apiComments","commentMap","Map","topLevelComments","forEach","comment","set","id","parentComment","get","reply_post_id","parent_post_id","replies","push","flattenComments","comments","reduce","flatComments","apply","posts","getAvailableGroups","groups"],"mappings":"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"}