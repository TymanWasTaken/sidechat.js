{"version":3,"file":"sidechat.module.js","sources":["../src/classes/SidechatAPIError.js","../src/classes/SidechatAPIClient.js"],"sourcesContent":["/**\r\n * Throwable error caused by the Sidechat API\r\n * @class\r\n * @extends Error\r\n */\r\nclass SidechatAPIError extends Error {\r\n  constructor(message) {\r\n    super(message);\r\n    this.name = \"SidechatAPIError\";\r\n  }\r\n}\r\n\r\nexport default SidechatAPIError;\r\n","import \"../types/SidechatTypes.js\";\r\nimport SidechatAPIError from \"../classes/SidechatAPIError.js\";\r\n\r\n/**\r\n * API client class for making requests to Sidechat's private API.  You'll need to [authenticate]{@tutorial Authentication} before using most of the methods.\r\n * @class\r\n * @since 2.0.0-alpha.0\r\n */\r\nclass SidechatAPIClient {\r\n  /**\r\n   * User bearer token\r\n   * @type {SidechatAuthToken}\r\n   * */\r\n  userToken;\r\n  /**\r\n   * Default headers for every API request\r\n   * @type {Object}\r\n   * @static\r\n   */\r\n  defaultHeaders = {\r\n    Accept: \"application/json\",\r\n    \"Content-Type\": \"application/json\",\r\n  };\r\n\r\n  /**\r\n   * Create a new instance of the API client\r\n   * @param {SidechatAuthToken} [token] - user bearer token\r\n   */\r\n  constructor(token = \"\") {\r\n    if (token) {\r\n      this.userToken = token;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Manually set the currently signed in user's token.  Generally try to avoid this and instead either pass a token to the constructor or login automatically through the auth functions\r\n   * @method\r\n   * @param {SidechatAuthToken} token - user bearer token\r\n   */\r\n  setToken = (token) => {\r\n    this.userToken = token;\r\n  };\r\n\r\n  /**\r\n   * Initiate the login process with a phone number.  Should be followed up with verifySMSCode().\r\n   * @method\r\n   * @param {Number} phoneNumber - US phone number (WITHOUT +1) to send verification code to\r\n   */\r\n  loginViaSMS = async (phoneNumber) => {\r\n    try {\r\n      const res = await fetch(`https://api.sidechat.lol/v1/login_register`, {\r\n        method: \"POST\",\r\n        headers: this.defaultHeaders,\r\n        body: JSON.stringify({\r\n          phone_number: `+1${phoneNumber}`,\r\n          version: 3,\r\n        }),\r\n      });\r\n      const json = await res.json();\r\n      return json;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new SidechatAPIError(\"Failed to request SMS verification.\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Verify the code sent via SMS with loginViaSMS().\r\n   * @method\r\n   * @param {Number} phoneNumber - US phone number (WITHOUT +1) that verification code was sent to\r\n   * @param {String} code  - the verification code\r\n   */\r\n  verifySMSCode = async (phoneNumber, code) => {\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.sidechat.lol/v1/verify_phone_number`,\r\n        {\r\n          method: \"POST\",\r\n          headers: this.defaultHeaders,\r\n          body: JSON.stringify({\r\n            phone_number: `+1${phoneNumber}`,\r\n            code: code.toUpperCase(),\r\n          }),\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      if (json?.logged_in_user?.token) {\r\n        this.userToken = json.logged_in_user.token;\r\n      }\r\n      return json;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new SidechatAPIError(\"Failed verify this code.\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Set the user's age\r\n   * @method\r\n   * @param {Number} age - user's age in years\r\n   * @param {String} registrationID  - the registration ID generated by verifySMSCode()\r\n   */\r\n  setAge = async (age, registrationID) => {\r\n    if (age < 13) {\r\n      throw new SidechatAPIError(\"You're too young to use Offsides.\");\r\n    }\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.sidechat.lol/v1/complete_registration`,\r\n        {\r\n          method: \"POST\",\r\n          headers: this.defaultHeaders,\r\n          body: JSON.stringify({\r\n            age: Number(age),\r\n            registration_id: registrationID,\r\n          }),\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      if (json.token) {\r\n        this.userToken = json.token;\r\n      }\r\n      return json;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new SidechatAPIError(\"Failed verify this code.\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Initiate the email setup process.  Should be followed up with checkEmailVerification().\r\n   * @method\r\n   * @param {String} email - school email address to send verification code to\r\n   * @tutorial Email Registration\r\n   */\r\n  registerEmail = async (email) => {\r\n    if (!this.userToken) {\r\n      throw new SidechatAPIError(\"User is not authenticated.\");\r\n    }\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.sidechat.lol/v2/users/register_email`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...this.defaultHeaders,\r\n            Authorization: `Bearer ${this.userToken}`,\r\n          },\r\n          body: JSON.stringify({\r\n            email: email,\r\n          }),\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      if (json.message) {\r\n        throw new SidechatAPIError(json.message);\r\n      }\r\n      return json;\r\n    } catch (err) {\r\n      console.error(error);\r\n      throw new SidechatAPIError(\"Failed to request email verification.\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Check is the user's email is verified.\r\n   * @method\r\n   */\r\n  checkEmailVerification = async () => {\r\n    if (!this.userToken) {\r\n      throw new SidechatAPIError(\"User is not authenticated.\");\r\n    }\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.sidechat.lol/v1/users/check_email_verified`,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            ...this.defaultHeaders,\r\n            Authorization: `Bearer ${this.userToken}`,\r\n          },\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      if (json.verified_email_updates_response) {\r\n        return json.verified_email_updates_response;\r\n      } else {\r\n        throw new SidechatAPIError(json?.message || \"Email is not verified.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(error);\r\n      throw new SidechatAPIError(\"Email is not verified.\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Set the device ID of the current user\r\n   * @method\r\n   * @param {String} deviceId - the device ID to set\r\n   */\r\n  setDeviceID = async (deviceID) => {\r\n    if (!this.userToken) {\r\n      throw new SidechatAPIError(\"User is not authenticated.\");\r\n    }\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.sidechat.lol/v1/register_device_token`,\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...this.defaultHeaders,\r\n            Authorization: `Bearer ${this.userToken}`,\r\n          },\r\n          body: JSON.stringify({\r\n            build_type: \"release\",\r\n            bundle_id: \"com.flowerave.sidechat\",\r\n            device_token: deviceID,\r\n          }),\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      await AsyncStorage.setItem(\"deviceID\", deviceID);\r\n      return json;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new SidechatAPIError(\"Failed verify this code.\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get updated status for user and group\r\n   * @method\r\n   * @param {String} [groupID] - ID of a specific group to retrieve info from\r\n   */\r\n  getUserAndGroup = async (groupID = \"\") => {\r\n    if (!this.userToken) {\r\n      throw new SidechatAPIError(\"User is not authenticated.\");\r\n    }\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.sidechat.lol/v1/updates?group_id=${groupID}`,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            ...this.defaultHeaders,\r\n            Authorization: `Bearer ${this.userToken}`,\r\n          },\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      return json;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new SidechatAPIError(`Failed to get posts from group.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Fetches posts from the specified category in a group\r\n   * @method\r\n   * @param {String} groupID - group ID\r\n   * @param {\"hot\"|\"recent\"|\"top\"} category - category to filter posts\r\n   * @param {SidechatCursorString} [cursor] - cursor string\r\n   * @returns {SidechatPostsAndCursor} List of posts and cursor\r\n   */\r\n  getGroupPosts = async (groupID, category = \"hot\", cursor) => {\r\n    if (!this.userToken) {\r\n      throw new SidechatAPIError(\"User is not authenticated.\");\r\n    }\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.sidechat.lol/v1/posts?group_id=${groupID}&type=${category}${\r\n          cursor ? \"&cursor=\" + cursor : \"\"\r\n        }`,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            ...this.defaultHeaders,\r\n            Authorization: `Bearer ${this.userToken}`,\r\n          },\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      return json;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new SidechatAPIError(`Failed to get posts from group.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Upvote or downvote, or unvote a post\r\n   * @method\r\n   * @param {String} postID - post ID to vote on\r\n   * @param {SidechatVoteString} action - whether to upvote, downvote, or reset vote\r\n   */\r\n  setVote = async (postID, action) => {\r\n    if (!this.userToken) {\r\n      throw new SidechatAPIError(\"User is not authenticated.\");\r\n    }\r\n    try {\r\n      const res = await fetch(`https://api.sidechat.lol/v1/posts/set_vote`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...this.defaultHeaders,\r\n          Authorization: `Bearer ${this.userToken}`,\r\n        },\r\n        body: JSON.stringify({\r\n          post_id: postID,\r\n          vote_status: action,\r\n        }),\r\n      });\r\n      const json = await res.json();\r\n      return json;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new SidechatAPIError(`Failed to change the vote on post.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get all the commments on a post\r\n   * @method\r\n   * @param {String} postID - post ID to get comments for\r\n   * @returns {SidechatPostOrComment[]} list of comments\r\n   */\r\n  getPostComments = async (postID) => {\r\n    if (!this.userToken) {\r\n      throw new SidechatAPIError(\"User is not authenticated.\");\r\n    }\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.sidechat.lol/v1/posts/comments/?post_id=${postID}`,\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            ...this.defaultHeaders,\r\n            Authorization: `Bearer ${this.userToken}`,\r\n          },\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      // Function to preprocess the comments and organize them into a nested structure\r\n      function preprocessComments(apiComments) {\r\n        // Map to store comments by their IDs for efficient lookup\r\n        const commentMap = new Map();\r\n        // List to store top-level comments\r\n        const topLevelComments = [];\r\n\r\n        // Iterate through the API comments\r\n        apiComments.forEach((comment) => {\r\n          // Store the comment in the map with its ID as the key\r\n          commentMap.set(comment.id, comment);\r\n          // Get the parent comment using the reply_post_id\r\n          const parentComment = commentMap.get(comment.reply_post_id);\r\n          // Check if the comment is a top-level comment\r\n          if (\r\n            !parentComment ||\r\n            comment.reply_post_id === comment.parent_post_id\r\n          ) {\r\n            // If it's a top-level comment, push it to the topLevelComments array\r\n            topLevelComments.push(comment);\r\n          } else {\r\n            // If it's a reply, add it to the parent comment's replies array\r\n            if (!parentComment.replies) parentComment.replies = [];\r\n            parentComment.replies.push(comment);\r\n          }\r\n        });\r\n\r\n        // Flatten the nested structure and return a single list of comments\r\n        return flattenComments(topLevelComments);\r\n      }\r\n\r\n      // Function to flatten nested comments into a single list\r\n      function flattenComments(comments) {\r\n        // Use reduce to flatten the nested comments array into a single list\r\n        return comments.reduce((flatComments, comment) => {\r\n          // Push the current comment to the flatComments array\r\n          flatComments.push(comment);\r\n          // If the current comment has replies, recursively flatten them and push to the flatComments array\r\n          if (comment.replies)\r\n            flatComments.push(...flattenComments(comment.replies));\r\n          // Return the flatComments array\r\n          return flatComments;\r\n        }, []);\r\n      }\r\n\r\n      const sortedComments = preprocessComments(json.posts);\r\n      return sortedComments;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new SidechatAPIError(`Failed to get comments on post.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Gets groups to be displayed on the \"Explore Groups\" page\r\n   * @method\r\n   * @returns {SidechatGroup[]}\r\n   */\r\n  getAvailableGroups = async () => {\r\n    if (!this.userToken) {\r\n      throw new SidechatAPIError(\"User is not authenticated.\");\r\n    }\r\n    try {\r\n      const res = await fetch(`https://api.sidechat.lol/v1/groups/explore`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          ...this.defaultHeaders,\r\n          Authorization: `Bearer ${this.userToken}`,\r\n        },\r\n      });\r\n      const json = await res.json();\r\n      return await json.groups;\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw new SidechatAPIError(`Failed to get groups from explore.`);\r\n    }\r\n  };\r\n}\r\n\r\nexport default SidechatAPIClient;\r\n"],"names":["SidechatAPIError","_Error","message","_this","call","name","_wrapNativeSuper","Error","_catch","body","recover","result","e","then","SidechatAPIClient","token","_this2","this","_this3","_this4","_this5","_this6","_this7","_this8","_this9","_this10","_this11","_this12","defaultHeaders","Accept","setToken","userToken","loginViaSMS","phoneNumber","Promise","resolve","fetch","method","headers","JSON","stringify","phone_number","version","res","json","err","console","error","reject","verifySMSCode","code","toUpperCase","_json$logged_in_user","logged_in_user","setAge","age","registrationID","Number","registration_id","registerEmail","email","_extends","Authorization","checkEmailVerification","verified_email_updates_response","setDeviceID","deviceID","build_type","bundle_id","device_token","AsyncStorage","setItem","getUserAndGroup","groupID","getGroupPosts","category","cursor","setVote","postID","action","post_id","vote_status","getPostComments","preprocessComments","apiComments","commentMap","Map","topLevelComments","forEach","comment","set","id","parentComment","get","reply_post_id","parent_post_id","replies","push","flattenComments","comments","reduce","flatComments","apply","posts","getAvailableGroups","groups"],"mappings":"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"}